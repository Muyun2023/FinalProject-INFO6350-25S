//  ReviewNote

@Published：是一个属性包装器，用来标记这个属性发生变化时，
SwiftUI 会自动更新视图。当 departments 或 isLoading
的值发生变化时，任何依赖于这些属性的视图都会被重新渲染。

@StateObject：这个属性包装器用于创建和管理 viewModel 实例，确保当 viewModel 数据发生变化时，视图会重新渲染。它保证了 viewModel 在视图的生命周期内是持久存在的。

在 switch 语句中，括号中的 let departments 不是参数，
而是一个 模式匹配 的语法。它是用来从 .success 枚举中 提取数据 的。
在 Swift 中，模式匹配 是一种将数据结构中的内容提取出来的方式，特别是对于枚举类型，
case 语句可以提取出不同的值。例如，在这里，Result 枚举的 .success 包含了我们想要的数据
（即 departments 数组）。我们通过 let 来解包（提取）这个数据

DispatchQueue.main.async：
确保 UI 更新在主线程上进行。SwiftUI 强烈要求 UI 更新在主线程中执行，因此在从后台线程获取数据后，必须将
UI 更新切换到主线程。

什么是 DispatchQueue？
在 iOS 和 macOS 开发中，DispatchQueue
是用来管理代码执行的队列。队列负责按一定的顺序执行任务，而我们通常会遇到两种类型的队列：
主队列（Main Queue）：用于更新用户界面（UI）的队列。因为 UI
更新必须在主线程（主队列）上进行，所以所有的 UI 相关的操作都应该放在主队列中执行。
后台队列（BackgroundQueue）：
用于执行时间较长的操作，比如网络请求、文件读写等，这些操作通常不需要直接更新 UI，可以在后台线程中执行。

DispatchQueue.main.async {} 是做什么的？
DispatchQueue.main：这表示主队列。主队列是一个特殊的队列，它只能在主线程上执行任务。所有涉及到 UI
的操作（比如更新界面元素）都必须在主线程上执行，否则可能会导致界面卡顿或崩溃。
async：async表示异步执行。
我们可以把任务提交到主队列中，但不需要等待任务完成。这样代码会继续执行，不会阻塞当前线程。
{}：这是一个闭包（closure），用于包含异步执行的代码块。闭包中的代码会在主线程上执行。
所以，DispatchQueue.main.async {} 的作用是将代码放到 主队列 中异步执行，即在 主线程 上执行。

为什么要使用 DispatchQueue.main.async？
网络请求通常是在后台线程中完成的，所以需要用 DispatchQueue.main.async 将 UI 更新操作切换到主线程
我们会从 后台线程（比如网络请求或数据库操作）获取到一些数据，然后需要更新 UI。因为 UI
只能在主线程上更新，如果我们直接在后台线程中更新 UI，程序会崩溃或不稳定。因为 UIKit（更新 UI
的框架）要求所有 UI 更新必须在主线程上进行。DispatchQueue.main.async
正是用来确保这点，避免出现线程安全问题
例如，假设我们在后台线程获取到部门数据，并想要更新界面上的部门列表。我们必须使用 DispatchQueue.main.async 将更新 UI 的代码放到主线程上。

同步（sync）：当我们执行一个同步操作时，当前线程会阻塞，直到该操作完成。这意味着代码的执行顺序是严格的，一个操作完成后才能继续执行下一个操作。
异步（async）：当我们执行一个异步操作时，当前线程不会等待该操作完成，而是继续执行后续的代码。异步操作通常会在另一个线程中执行，等到操作完成时，通过回调、通知或者闭包等方式通知主线程继续处理。


DepartmentViewModel：管理数据的获取和更新，负责与 API 通信，并将数据传递给视图。
DepartmentListView：展示部门列表视图，支持加载状态和错误处理，显示每个部门的信息，并提供一个整洁的 UI。
@StateObject 和 @Published：这些是用来在数据变化时更新视图的属性包装器
